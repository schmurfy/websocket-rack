{"name":"Websocket-rack","body":"## Usage\r\n\r\nCreate sample rack config file, and inside build app basing on Rack::WebSocket::Application.\r\n\r\n``` ruby\r\nrequire 'rack/websocket'\r\n\r\nclass MyApp < Rack::WebSocket::Application\r\nend\r\n\r\nmap '/' do\r\n  run MyApp.new\r\nend\r\n```\r\n\r\nAfter that just run Rack config from Rack server:\r\n\r\n``` bash\r\nthin -R config.ru start\r\n```\r\n\r\nDone.\r\n\r\n## Configuration\r\n\r\nRack::WebSocket::Application make following methods available:\r\n\r\n### initialize\r\n\r\nCalled once after server is started. This is place for application configuration so each instance variables from here will be available in whole application.\r\n\r\nExample:\r\n\r\n``` ruby\r\nclass MyApp < Rack::WebSocket::Application\r\n  def initialize(options = {})\r\n    super\r\n    @myvar = 4\r\n  end\r\nend\r\n```\r\n\r\nIt is important to include 'super' in initialize function, so application will be properly configured.\r\n\r\nPlease notice that in some servers, when 'initialize' is called, EventMachine reactor is not running yet. If you would like to configure EventMachine-based software, then you need to put it inside 'EM.next_tick' block, so this function will be called in first cycle of reactor.\r\n\r\nExample:\r\n\r\n``` ruby\r\nclass MyWebSocket < Rack::WebSocket::Application\r\n  def initialize\r\n    EM.next_tick { @redis = EM::Hiredis.connect }\r\n  end\r\nend\r\n```\r\n\r\n### on_open(env)\r\n\r\nCalled after client is connected. Rack env of client is passed as attribute.\r\n\r\nExample:\r\n\r\n``` ruby\r\nclass MyApp < Rack::WebSocket::Application\r\n  def on_open(env)\r\n    puts \"Clien connected\"\r\n  end\r\nend\r\n```\r\n\r\n### on_close(env)\r\n\r\nCalled after client is disconnected. Rack env of client is passed as attribute.\r\n\r\nExample:\r\n\r\n``` ruby\r\nclass MyApp < Rack::WebSocket::Application\r\n  def on_close(env)\r\n    puts \"Clien disconnected\"\r\n  end\r\nend\r\n```\r\n\r\n### on_message(env, msg)\r\n\r\nCalled after server receive message. Rack env of client is passed as attribute.\r\n\r\nExample:\r\n\r\n``` ruby\r\nclass MyApp < Rack::WebSocket::Application\r\n  def on_message(env, msg)\r\n    puts \"Received message: \" + msg\r\n  end\r\nend\r\n```\r\n\r\n### on_error(env, error)\r\n\r\nCalled after server catch error. Variable passed is instance of Ruby Exception class.\r\n\r\nExample:\r\n\r\n``` ruby\r\nclass MyApp < Rack::WebSocket::Application\r\n  def on_error(env, error)\r\n    puts \"Error occured: \" + error.message\r\n  end\r\nend\r\n```\r\n\r\n### send_data(data)\r\n\r\nSends data do client.\r\n\r\nExample:\r\n\r\n``` ruby\r\nclass MyApp < Rack::WebSocket::Application\r\n  def on_open(env)\r\n    send_data \"Hello to you!\"\r\n  end\r\nend\r\n```\r\n\r\n### close_websocket\r\n\r\nCloses connection.\r\n\r\nExample:\r\n\r\n``` ruby\r\nclass MyApp < Rack::WebSocket::Application\r\n  def on_open(env)\r\n    close_websocket if env['REQUEST_PATH'] != '/websocket'\r\n  end\r\nend\r\n```\r\n\r\n## Available variables:\r\n\r\n### @options\r\n\r\nOptions passed to app on initialize.\r\n\r\nExample:\r\n\r\n``` ruby\r\n# In config.ru\r\nmap '/' do\r\n  run MyApp.new :some => :variable\r\nend\r\n\r\n# In application instance\r\n@options # => { :some => :variable }\r\n```\r\n\r\n## FAQ\r\n\r\n### Which WebSocket drafts are supported:\r\n\r\nCurrently we support drafts -75 and -76 form old(hixie) numeration and all drafts from -00 to -13 from current(ietf-hybi) numeration.\r\nPlease note that ietf-hybi-13 is currently proposed as final standard.\r\n\r\n### Which Rack servers are supported?\r\n\r\nCurrently we are supporting following servers:\r\n\r\n- Thin\r\n\r\n### How to enable debugging?\r\n\r\nJust use :backend => { :debug => true } option when initializing your app.\r\n\r\n### How to enable wss/SSL support?\r\n\r\nThin v1.2.8 have --ssl option - just use that! :)\r\n\r\n### How to use function xxx?\r\n\r\nCheck [Thin](http://code.macournoyer.com/thin/) config - any option supported by Thin(like demonizing, SSL etc.) is supported by WebSocket-Rack.\r\n\r\n### Why (using Thin) user is disconnected after 30 seconds?\r\n\r\nThis is bug in EventMachine < 1.0.0. Please consider updating to newer version or use thin-websocket wrapper around thin binary.\r\n","tagline":"WebSocket server basing on Rack","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}